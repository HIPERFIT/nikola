Configuring
-----------

Nikola currently supports GHC version 7.4 and version 4.2 of the CUDA SDK.

Linux, Ubuntu 12.04 LTS x86_64, CUDA 4.2 SDK
============================================

I have CUDA 4.2 installed at /usr/local/cuda/4.2/cuda (and the 4.2 SDK at
/usr/local/cuda/4.2/sdk). ```nvcc``` is not happy with GCC 4.6, which is the
default on Ubuntu 12.04, so you must install the gcc-4.5 and g++-4.5 packages
(yes, you need g++-4.5). I configure Nikola like this:

```
cabal configure \
      --disable-library-profiling \
      --enable-tests \
      --flags="examples" \
      --configure-option="--with-nvcc=/usr/local/cuda/4.2/cuda/bin/nvcc" \
      --configure-option="--with-nvcc-cc=/usr/bin/gcc-4.5"
```

Known Issues
------------

Versions of the ```cuda``` package prior to version 5, which is not yet on
hackage, can corrupt device memory pointers in some cases. If you experience
CUDA errors, please install the ```cuda``` package directly from github.

Running the benchmarks
----------------------

The current Black-Scholes benchmark uses the
[criterion](http://hackage.haskell.org/package/criterion) library and outputs
data in CSV format where the first column is the number of elements
processed. The rest of the columns are broken up into to groups of three
columns, where the three columns are the mean, min, and max time taken to
process the N inputs by one of the Black-Scholes implementations. The first
group is the timings for the implementation that uses Nikola's run-time
compilation mechanism, the next group uses Nikola's compile-time scheme, and the
final group uses ```Data.Vector.Unboxed```. The original benchmark in [Nikola:
Embedding Compiled GPU Functions in
Haskell](http://www.eecs.harvard.edu/~mainland/publications/mainland10nikola.pdf)
included additional implementations. You can run the benchmark as follows:

```
./dist/build/blackscholes/blackscholes -s 10
```
